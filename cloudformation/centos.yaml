AWSTemplateFormatVersion: "2010-09-09"
Description: GPE v1.1a - Centos 8.3 Utility Server
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General
        Parameters:
          - KeyName
          - S3Bucket
          - S3Path
          - EnvironmentTag
          - PublicRouteTable
          - PrivateRouteTable
      - Label:
          default: Active Directory
        Parameters:
          - ADDnsIpAddress1
          - ADDnsIpAddress2
          - ADDirectoryName
          - JoinAccount
          - JoinAccountPassword
      - Label:
          default: L0 Hypervisor (KVM)
        Parameters:
          - InstanceType
          - TimeZoneCloudConfigFormat
          - Subnet
          - SecurityGroup
          - LinuxAMI
          - PVSize
          - InstanceProfile
          - OSTag
      - Label:
          default: L1 Hypervisor (ESXi)
        Parameters:
          - CoreforNested
          - MemoryforNested
          - ESXHostCount
          - ESXDiskCount
          - ESXDiskSize
      - Label:
          default: Nerdknobs
        Parameters:
          - nestedvolumeiops
    ParameterLabels:
      KeyName:
        default: KeyPair to access your KVM host(s)
      InstanceType:
        default: EC2 Bare metal model
      PVSize:
        default: GB per LVM PV for /nested filesystem (4x 500GB = 2.5 TB total by default)
      MemoryforNested:
        default: Hypervisor Memory
      CoreforNested:
        default: Number of cores
      ESXHostCount:
        default: Number of nested ESXi hosts
      ESXDiskCount:
        default: Number of local disks for nested ESXi hosts
      ESXDiskSize:
        default: Size of local disks for nested ESXi hosts
      TimeZoneCloudConfigFormat:
        default: This facilitates event correlation in CloudWatch
      Subnet:
        default: This should be a private subnet (L0Subnet if using packaged dependency creator)
      S3Bucket:
        default: S3 Bucket holding the child templates and other such content
      S3Path:
        default: S3 Prefix/Directory where the root of our content tree lives
      EnvironmentTag:
        default: Environment type to tag this instance as
      OSTag:
        default: OS Tag for patch grouping [L0 Instance]
      PrivateRouteTable:
        default: Id of your private route table
      PublicRouteTable:
        default: Id of your private route table
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair (i.e. my-ec2-keypair)
  InstanceType:
    Type: String
    Default: "m5.metal"
    AllowedValues:
      - "c5.metal"
      - "c5n.metal"
      - "c5d.metal"
      - "m5.metal"
      - "m5d.metal"
      - "z1d.metal"
      - "r5.metal"
      - "i3.metal"
      - "i3en.metal"
  MemoryforNested:
    Description: RAM for each individual nested hypervisor in GB
    Type: String
    Default: 28
  CoreforNested:
    Description: LCPU allocation for each individual nested hypervisor.
    Type: String
    Default: 6
  ESXHostCount:
    Description: Number of ESXi hosts
    Type: Number
    Default: 12
    MaxValue: 32
    MinValue: 4
  ESXDiskCount:
    Description: Number of local disks attached to each nested ESXi host (VSAN minimum disk count is 4)
    Type: Number
    Default: 1
    MaxValue: 5
    MinValue: 1
  ESXDiskSize:
    Description: Size in GB of local disks attached to each nested ESXi host (VSAN minimum disk size is 300)
    Type: Number
    Default: 300
    MaxValue: 1000
    MinValue: 1
  Subnet:
    Type: AWS::EC2::Subnet::Id
    Description: SubnetId in your Virtual Private Cloud (VPC)
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: SG for this instance
  InstanceProfile:
    Type: String
    Description: Ensure the associated role has permissions for SSM, Cloudwatch, and your S3 bucket
  ADDnsIpAddress1:
    Type: String
    Description: First AD Server IP
  ADDnsIpAddress2:
    Type: String
    Description: Second AD Server IP
  ADDirectoryName:
    Type: String
    Description: Domain name formatted like-> utility.local
  LinuxAMI:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs
    Description: Public SSM Parameter pointing to the latest Amazon Linux 2 AMI
  TimeZoneCloudConfigFormat:
    Description: Time Zone for instances in cloud-config.txt format
    Type: String
    Default: "US/Eastern"
    AllowedValues:
      - "US/Eastern"
      - "US/Central"
      - "US/Mountain"
      - "US/Pacific"
  JoinAccount:
    Type: String
    Description: username formatted like-> administrator@example.local
  JoinAccountPassword:
    Description: Password for domain admin
    Type: String
    NoEcho: "True"
  PVSize:
    Description: /nested/ is where the virtual disks for L1 VMs will live.  24x ESXi images can easily add up to 2TB if they all contain L2 vdisks
    Type: Number
    Default: 500
    MaxValue: 1000
    MinValue: 100
  S3Bucket:
    Type: String
    Description: just the s3 bucket base name like -> mys3bucket
  S3Path:
    Type: String
    Description: just the base prefix name like -> seahow
  EnvironmentTag:
    Description: Select to identify use case of this environment - this is helpful for reporting
    Type: String
    Default: "SelfStudy"
    AllowedValues:
      - "ProblemRepro"
      - "ClassroomTraining"
      - "SelfStudy"
      - "Development"
  OSTag:
    Description: Leave this alone
    Type: String
    Default: "AmazonLinux2"
    AllowedValues:
      - "AmazonLinux2"
  nestedvolumeiops:
    Type: Number
    Default: 2500
    MaxValue: 25000
    MinValue: 250
    Description: Provisioned IOPs for each of the 4 io1 volumes that constitute the RAID-0 array mounted on /nested
  PrivateRouteTable:
    Type: String
  PublicRouteTable:
    Type: String
  InsertRoutes:
    Type: String
    Description: Only choose yes for the first L0 you deploy to this environment
    Default: "yes"
    AllowedValues:
      - "yes"
      - "no"
Conditions:
  AddRoutes:
    Fn::Equals:
      - Ref: InsertRoutes
      - "yes"
Resources:
  PrivateRouteToVLAN20:
    Type: AWS::EC2::Route
    Condition: AddRoutes
    DependsOn: Eth0
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: "192.168.20.0/24"
      NetworkInterfaceId:
        Ref: Eth0
  PrivateRouteToVLAN30:
    Type: AWS::EC2::Route
    Condition: AddRoutes
    DependsOn: Eth0
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: "192.168.30.0/24"
      NetworkInterfaceId:
        Ref: Eth0
  PrivateRouteToVLAN40:
    Type: AWS::EC2::Route
    Condition: AddRoutes
    DependsOn: Eth0
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: "192.168.40.0/24"
      NetworkInterfaceId:
        Ref: Eth0
  PublicRouteToVLAN20:
    Type: AWS::EC2::Route
    Condition: AddRoutes
    DependsOn: Eth0
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: "192.168.20.0/24"
      NetworkInterfaceId:
        Ref: Eth0
  PublicRouteToVLAN30:
    Type: AWS::EC2::Route
    Condition: AddRoutes
    DependsOn: Eth0
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: "192.168.30.0/24"
      NetworkInterfaceId:
        Ref: Eth0
  PublicRouteToVLAN40:
    Type: AWS::EC2::Route
    Condition: AddRoutes
    DependsOn: Eth0
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: "192.168.40.0/24"
      NetworkInterfaceId:
        Ref: Eth0
  Eth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: eth0
      GroupSet:
        - Ref: SecurityGroup
      SourceDestCheck: false
      SubnetId:
        Ref: Subnet
      Tags:
        - Key: Name
          Value: Interface 0
        - Key: Interface
          Value: eth0
  InstanceLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join:
          - ""
          - - "/"
            - Ref: AWS::StackName
      RetentionInDays: 1
  LinuxKVM:
    Type: AWS::EC2::Instance
    DependsOn:
      - InstanceLogs
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT45M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          Default:
            - 01_SetGlobalLinuxParameters
            - 02_setupCfnHup
            - 03_config-amazon-cloudwatch-agent
            - 04_restart_amazon-cloudwatch-agent
            - 05_grub
            - 06_core_config
            - 07_install_ovs
            - 08_configure_kvm
          UpdateEnvironment:
            - 03_config-amazon-cloudwatch-agent
            - 04_restart_amazon-cloudwatch-agent
        01_SetGlobalLinuxParameters:
          files:
            /etc/dhcp/dhclient.conf:
              content: !Sub |
                supersede domain-name-servers ${ADDnsIpAddress1}, ${ADDnsIpAddress2};
              mode: "000644"
              owner: root
              group: root
          commands:
            03_SetHostNameCtl:
              command: "hostnamectl set-hostname L0-$(openssl rand -hex 2 | tr [:lower:] [:upper:])"
              waitAfterCompletion: 5
            04_SetHostFile:
              command: !Sub 'echo $( ifconfig eth0 | awk ''/inet / {gsub("addr:", "" , $2); print $2}'' ) $( hostname ).${ADDirectoryName} $( hostname ) >> /etc/hosts'
              waitAfterCompletion: 10
            05_sighup_dhclient:
              command: dhclient
              waitAfterCompletion: 15
        02_setupCfnHup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LinuxKVM.Metadata.AWS::CloudFormation::Init.03_config-amazon-cloudwatch-agent
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource LinuxKVM --region ${AWS::Region} --configsets UpdateEnvironment
                runas=root
              mode: "000400"
              owner: root
              group: root
            /lib/systemd/system/cfn-hup.service:
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: !Sub |
                systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: !Sub |
                systemctl start cfn-hup.service
        03_config-amazon-cloudwatch-agent:
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub |
                {
                  "metrics": {
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "metrics_collected": {
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ]
                      },
                      "swap": {
                        "measurement": [
                          "swap_used_percent"
                        ]
                      }
                    }
                  }
                }
        04_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
              waitAfterCompletion: 10
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
              waitAfterCompletion: 10
        05_grub:
          files:
            /nested/XML/newgrub:
              content: |
                GRUB_CMDLINE_LINUX_DEFAULT="console=tty0 console=ttyS0,115200n8 net.ifnames=0 biosdevname=0 nvme_core.io_timeout=4294967295 rd.emergency=poweroff rd.shell=0 intel_idle.max_cstate=1 intel_iommu=on"
                GRUB_TIMEOUT=0
                GRUB_DISABLE_RECOVERY="true"
              mode: "000444"
              owner: root
              group: root
          commands:
            01_swap_grub:
              command: rm -f /etc/default/grub && mv /nested/XML/newgrub /etc/default/grub && grub2-mkconfig -o /boot/grub2/grub.cfg
        06_core_config:
          sources:
            /gopath/src/github.com/advantageous/systemd-cloud-watch: "https://github.com/advantageous/systemd-cloud-watch/tarball/master"
          files:
            /etc/profile.d/goenv.sh:
              content: |
                export GOPATH=/gopath
              mode: "000777"
              owner: root
              group: root
            /etc/journald-cloudwatch.conf:
              content: !Sub |
                log_group="${InstanceLogs}"
                log_stream="/${AWS::StackName}/system.journal"
                state_file="/var/lib/journald-cloudwatch-logs/state"
                log_priority=4
                buffer_size=100
              mode: "000444"
              owner: root
              group: root
            /nested/Desktop/virt-manager.desktop:
              content: |
                #!/usr/bin/env xdg-open
                [Desktop Entry]
                Name=Virtual Machine Manager
                Comment=Manage virtual machines
                Icon=virt-manager
                Exec=virt-manager
                Type=Application
                Terminal=false
                Categories=System;
              mode: "000777"
              owner: root
              group: root
          commands:
            03_crontab_entry:
              command: echo "*/5 * * * * /etc/awslogs/epochtohuman.sh /var/log/audit/audit.log > /var/log/audit/audit.log.converted" | crontab -
              waitAfterCompletion: 1
            04_JoinAD:
              command: !Sub echo ${JoinAccountPassword}| realm join -U administrator --client-software=sssd ${ADDirectoryName} --verbose
              waitAfterCompletion: 1
              ignoreErrors: "True"
            05_config_sshd:
              command: sed -ibak -e 's/PasswordAuthentication no/#PasswordAuthentication no/g' -e 's/#PasswordAuthentication yes/PasswordAuthentication yes/g' -e 's/#PermitEmptyPasswords no/PermitEmptyPasswords no/g' -e 's/#AllowAgentForwarding yes/AllowAgentForwarding yes/g' /etc/ssh/sshd_config
              waitAfterCompletion: 1
              ignoreErrors: "True"
            06_restart_sshd:
              command: systemctl restart sshd.service
              waitAfterCompletion: 1
              ignoreErrors: "True"
            07_make_domain_admins_sudoer:
              command: !Sub echo "%Domain\ Admins@${ADDirectoryName} ALL=(ALL:ALL) ALL" >> /etc/sudoers
              waitAfterCompletion: 1
              ignoreErrors: "True"
            09_limit_sshd_ad_logins_to_domain_admins:
              command: !Sub awk 'BEGIN {str="${ADDirectoryName}"; gsub("[.]", ",DC=", str); print "ad_access_filter = (memberOf=CN=Domain Admins,OU=Users,DC="str")"}' >> sssd.conf
              waitAfterCompletion: 1
              ignoreErrors: "True"
            11_journald_cloudwatch:
              command: unbuffer /gopath/src/github.com/advantageous/systemd-cloud-watch/installer.sh | ts '[%Y%m%d-%H:%M:%.S]' &> /var/log/systemd-cloud-watch-installer.log
              cwd: /gopath/src/github.com/advantageous/systemd-cloud-watch/
              waitAfterCompletion: 5
              ignoreErrors: "True"
            13_chown_in_case:
              command: !Sub chown -R ${JoinAccount}:Domain\ Admins@${ADDirectoryName} /home/${JoinAccount}
              waitAfterCompletion: 1
              ignoreErrors: "True"
            14_insert_dns_records:
              command: unbuffer /nested/scripts/insertdnsrecords.sh | ts '[%Y%m%d-%H:%M:%.S]' &> /var/log/insertdnsrecords.sh.log
              waitAfterCompletion: 1
              ignoreErrors: "True"
        07_install_ovs:
          commands:
            01-install-ovs:
              command: unbuffer /nested/scripts/installovs.sh | ts '[%Y%m%d-%H:%M:%.S]' &> /var/log/installovs.sh.log
              waitAfterCompletion: 1
              ignoreErrors: "True"
        08_configure_kvm:
          commands:
            01-fixperm:
              command: "/usr/bin/printf 'group = \"root\" \\nuser = \"root\"' >> /etc/libvirt/qemu.conf"
              waitAfterCompletion: 1
              ignoreErrors: "True"
            02-kvm-config:
              command: unbuffer ./kvm-config.sh | ts '[%Y%m%d-%H:%M:%.S]' &> /var/log/kvm-config.sh.log
              cwd: /nested/scripts/
              waitAfterCompletion: 1
              ignoreErrors: "True"
            03-crontab:
              command: unbuffer ./crontab.sh | ts '[%Y%m%d-%H:%M:%.S]' &> /var/log/crontab.sh.log
              cwd: /nested/scripts/
              waitAfterCompletion: 1
              ignoreErrors: "True"
            05-setrootuserpass:
              command: unbuffer ./setpass.sh | ts '[%Y%m%d-%H:%M:%.S]' &> /var/log/setpass.sh.log
              cwd: /nested/scripts/
              waitAfterCompletion: 1
              ignoreErrors: "True"
            06-install-desktop-stuff:
              command: unbuffer ./installdesktopstuff.sh | ts '[%Y%m%d-%H:%M:%.S]' &> /var/log/installdesktopstuff.sh.log
              cwd: /nested/scripts/
              waitAfterCompletion: 1
              ignoreErrors: "True"
            07-install-vmware-prereqs:
              command: unbuffer ./vmware-config-prereqs.sh | ts '[%Y%m%d-%H:%M:%.S]' &> /var/log/vmware-config-prereqs.sh.log
              cwd: /nested/scripts/
              waitAfterCompletion: 1
              ignoreErrors: "True"
    Properties:
      ImageId:
        Ref: LinuxAMI
      InstanceType:
        Fn::Select:
          - 0
          - Fn::Split:
              - " "
              - Fn::Select:
                  - 0
                  - Fn::Split:
                      - "|"
                      - Ref: InstanceType
      IamInstanceProfile:
        Ref: InstanceProfile
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - "L0"
                - Fn::Select:
                    - 0
                    - Fn::Split:
                        - "-"
                        - Fn::Select:
                            - 2
                            - Fn::Split:
                                - "/"
                                - !Ref "AWS::StackId"
        - Key: OS
          Value:
            Ref: OSTag
        - Key: Env
          Value:
            Ref: EnvironmentTag
        - Key: Patch Group
          Value:
            Fn::Join:
              - "/"
              - - Ref: EnvironmentTag
                - Ref: OSTag
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 100
            DeleteOnTermination: "True"
        - DeviceName: /dev/sdf
          Ebs:
            VolumeType: io1
            VolumeSize:
              Ref: PVSize
            DeleteOnTermination: "True"
            Iops:
              Ref: nestedvolumeiops
        - DeviceName: /dev/sdg
          Ebs:
            VolumeType: io1
            VolumeSize:
              Ref: PVSize
            DeleteOnTermination: "True"
            Iops:
              Ref: nestedvolumeiops
        - DeviceName: /dev/sdh
          Ebs:
            VolumeType: io1
            VolumeSize:
              Ref: PVSize
            DeleteOnTermination: "True"
            Iops:
              Ref: nestedvolumeiops
        - DeviceName: /dev/sdi
          Ebs:
            VolumeType: io1
            VolumeSize:
              Ref: PVSize
            DeleteOnTermination: "True"
            Iops:
              Ref: nestedvolumeiops
      NetworkInterfaces:
        - NetworkInterfaceId:
            Ref: Eth0
          DeviceIndex: 0

      KeyName:
        Ref: KeyName
      Monitoring: "True"
      EbsOptimized: "True"
      UserData:
        Fn::Base64: !Sub |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          timezone: ${TimeZoneCloudConfigFormat}
          resize_rootfs: True
          locale: en_US.UTF-8
          package_update: true
          package_upgrade: true
          package_reboot_if_required: true

          # create the config file for the awslogs agent
          write_files:
            - path: /etc/profile.d/env.sh
              permissions: 0777
              content: |
                export ESXHOSTCOUNT=${ESXHostCount}
                export ADDIRECTORYNAME=${ADDirectoryName}
                export ADDNSIPADDRESS1=${ADDnsIpAddress1}
                export ADDNSIPADDRESS2=${ADDnsIpAddress2}
                export JOINACCOUNT=${JoinAccount}
                export JOINACCOUNTPASSWORD=${JoinAccountPassword}
                export INSTANCEPROFILE=${InstanceProfile}
                export TIMEZONE=${TimeZoneCloudConfigFormat}
                export MEM=${MemoryforNested}
                export CORE=${CoreforNested}
                export DISKCOUNT=${ESXDiskCount}
                export DISKSIZE=${ESXDiskSize}
                export S3PATH=${S3Path}
                export S3BUCKET=${S3Bucket}
                export VCSAFILE=vcsa7.0/VMware-VCSA-all-7.0.0-15934039.iso
                export ESXCLIFILE=esxcli-7.0.0-15866526-lin64.sh
                export GENERALPASSWORD=Aws2020@
                export TEMPLATEPASSWORD=VMware1!
                export PYTHONIOENCODING=UTF-8
                export VNICMODEL=vmxnet3
              owner: root:root
            - path: /etc/awslogs/awscli.conf
              permissions: 0444
              content: |
                [plugins]
                cwlogs = cwlogs
              
                [default]
                region = ${AWS::Region}
              owner: root:root
            - path: /etc/awslogs/awslogs.conf
              permissions: 0444
              content: |
                [general]
                state_file= /var/awslogs/state/agent-state

                [/var/log/getfiles.sh.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/getfiles.sh.log
                log_group_name = ${InstanceLogs}                  
                log_stream_name = ${InstanceLogs}/var/log/getfiles.sh.log

                [/var/log/cloud-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cloud-init.log
                log_group_name = ${InstanceLogs}                  
                log_stream_name = ${InstanceLogs}/var/log/cloud-init.log

                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_group_name = ${InstanceLogs}                  
                log_stream_name = ${InstanceLogs}/var/log/cloud-init-output.log

                [/var/log/cfn-init.log]
                file = /var/log/cfn-init.log
                log_group_name = ${InstanceLogs}                 
                log_stream_name = ${InstanceLogs}/var/log/cfn-init.log
                datetime_format = %Y-%m-%d %H:%M:%S,%f 

                [/var/log/cfn-init-cmd.log]
                file = /var/log/cfn-init.log
                log_group_name = ${InstanceLogs}                 
                log_stream_name = ${InstanceLogs}/var/log/cfn-init-cmd.log
                datetime_format = %Y-%m-%d %H:%M:%S,%f 

                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                log_group_name = ${InstanceLogs}
                log_stream_name = ${InstanceLogs}/var/log/messages

                [/var/log/secure]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/secure
                log_group_name = ${InstanceLogs}
                log_stream_name = ${InstanceLogs}/var/log/secure

                [/var/log/cron]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cron
                log_group_name = ${InstanceLogs}
                log_stream_name = ${InstanceLogs}/var/log/cron

                [/var/log/audit/audit.log.converted]
                file = /var/log/audit/audit.log.converted
                log_group_name = ${InstanceLogs}
                log_stream_name = ${InstanceLogs}/var/log/audit/audit.log.converted
                datetime_format = %b %d %H:%M:%S

                [/var/log/boot.log]
                file = /var/log/boot.log
                log_group_name = ${InstanceLogs}
                log_stream_name = ${InstanceLogs}/var/log/boot.log
                datetime_format = %Y-%m-%d %H:%M:%S,%f

                [/var/log/yum.log]
                file = /var/log/yum.log
                log_group_name = ${InstanceLogs}
                log_stream_name = ${InstanceLogs}/var/log/yum.log                  
                datetime_format = %b %d %H:%M:%S

                [/var/log/amazon/ssm/errors.log]
                file = /var/log/amazon/ssm/errors.log
                log_group_name = ${InstanceLogs}
                log_stream_name = ${InstanceLogs}/var/log/amazon/ssm/errors.log
                datetime_format = %Y-%m-%d %H:%M:%S

                [/var/log/systemd-cloud-watch-installer.log]
                file = /var/log/systemd-cloud-watch-installer.log
                log_group_name = ${InstanceLogs}
                log_stream_name = ${InstanceLogs}/var/log/systemd-cloud-watch-installer.log                  
                datetime_format = [%Y%m%d-%H:%M:%.S]      

                [/var/log/kvm-config.sh.log]
                file = /var/log/kvm-config.sh.log
                log_group_name = ${InstanceLogs}
                log_stream_name = ${InstanceLogs}/var/log/kvm-config.sh.log                  
                datetime_format = [%Y%m%d-%H:%M:%.S] 

                [/var/log/installdesktopstuff.sh.log]
                file = /var/log/installdesktopstuff.sh.log
                log_group_name = ${InstanceLogs}
                log_stream_name = ${InstanceLogs}/var/log/installdesktopstuff.sh.log                  
                datetime_format = [%Y%m%d-%H:%M:%.S]  

                [/var/log/installovs.sh.log]
                file = /var/log/installovs.sh.log
                log_group_name = ${InstanceLogs}
                log_stream_name = ${InstanceLogs}/var/log/installovs.sh.log                  
                datetime_format = [%Y%m%d-%H:%M:%.S]  

                [/var/log/openvswitch/ovsdb-server.log]
                file = /var/log/openvswitch/ovsdb-server.log
                log_group_name = ${InstanceLogs}
                log_stream_name = ${InstanceLogs}/var/log/openvswitch/ovsdb-server.log
                initial_position = start_of_file 
                datetime_format = '%Y-%m-%dT%H:%M:%S%z'

                [/var/log/openvswitch/ovs-vswitchd.log]
                file = /var/log/openvswitch/ovs-vswitchd.log
                log_group_name = ${InstanceLogs}
                log_stream_name = ${InstanceLogs}/var/log/openvswitch/ovs-vswitchd.log
                initial_position = start_of_file
                datetime_format = '%Y-%m-%dT%H:%M:%S%z'    

                [/var/log/fetch-installers.sh.log]
                file = /var/log/fetch-installers.sh.log
                log_group_name = ${InstanceLogs}
                log_stream_name = ${InstanceLogs}/var/log/fetch-installers.sh.log                  
                datetime_format = [%Y%m%d-%H:%M:%.S]

                [/var/log/vmware-config-prereqs.sh.log]
                file = /var/log/vmware-config-prereqs.sh.log
                log_group_name = ${InstanceLogs}
                log_stream_name = ${InstanceLogs}/var/log/vmware-config-prereqs.sh.log                 
                datetime_format = [%Y%m%d-%H:%M:%.S]                

                [/var/log/vmware-config.sh.log]
                file = /var/log/vmware-config.sh.log
                log_group_name = ${InstanceLogs}
                log_stream_name = ${InstanceLogs}/var/log/vmware-config.sh.log                  
                datetime_format = [%Y%m%d-%H:%M:%.S]

                [/var/log/insertdnsrecords.sh.log]
                file = /var/log/insertdnsrecords.sh.log
                log_group_name = ${InstanceLogs}
                log_stream_name = ${InstanceLogs}/var/log/insertdnsrecords.sh.log                  
                datetime_format = [%Y%m%d-%H:%M:%.S]

                [/var/log/deploy_vcsa.sh.log]
                file = /var/log/deploy_vcsa.sh.log
                log_group_name = ${InstanceLogs}
                log_stream_name = ${InstanceLogs}/var/log/deploy_vcsa.sh.log                 
                datetime_format = [%Y%m%d-%H:%M:%.S]              

                [/var/log/dmesg.log.timestamped]
                file = /var/log/dmesg.log.timestamped
                log_group_name = ${InstanceLogs}
                log_stream_name = ${InstanceLogs}/var/log/dmesg.log.timestamped                  
                datetime_format = [%a %b %d %H:%M:%S %Y]     
              owner: root:root

          # bootcmd stuff runs even earlier than runcmd or cfn-init, and >>it will happen again<< if cloud-init package updates or similar cause a reboot
          bootcmd:
            # install kernel-devel for THIS version of the kernel 
            # - yum install kernel-devel-$(uname -r) 
            # install the amazon-linux-extras version of the epel repo and golang (for the systemd journal agent)
            - amazon-linux-extras install golang1.11 
            # get the epel GPG key and repo.  yes, I know we just sorta did that, but there's some stuff ONLY in the "real" epel repo we need
            - rpm --import http://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-7
            - yum install  https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            - echo 'bootcmd complete'

          yum_repos:
            raveit65-Mate-GTK3-epel-7:
              name: Copr repo for Mate-GTK3 owned by raveit65
              baseurl: https://download.copr.fedorainfracloud.org/results/raveit65/Mate-GTK3/epel-7-$basearch/
              type: rpm-md
              skip_if_unavailable: true
              gpgcheck: true
              gpgkey: https://download.copr.fedorainfracloud.org/results/raveit65/Mate-GTK3/pubkey.gpg
              repo_gpgcheck: false
              enabled: true
              enabled_metadata: true


          # packages happens AFTER bootcmd but BEFORE runcmd
          packages:
            # group 1 - general utils
            - polkit
            - python3
            - python3-pip
            - python3-setuptools
            - expect
            - moreutils
            - ipcalc
            - s3fs-fuse
            - nfs-utils
            - nfs4-acl-tools
            - parallel
            - s3cmd
            - nvme-cli
            - iotop
            - iftop
            - sshpass
            - ntp
            - openssl-devel
            # group 2 - needed to join AD
            - sssd
            - realmd
            - krb5-workstation
            - samba-common-tools
            - samba
            - samba-winbind
            - samba-winbind-clients
            - pam_krb5
            - mdadm
            # group 3 - needed for KVM
            - qemu-kvm
            - qemu-kvm-core
            - qemu-kvm-tools
            - libvirt
            - libvirt-python
            - libguestfs-tools
            - virt-manager
            - virt-viewer
            - virt-install
            # group 4 - OVS/network related
            - numactl
            - cmake
            - maven
            - byacc
            - unbound
            - dhcp
            - bonnie++
          power_state:
            delay: "+1"
            mode: reboot
            message: cloud-init finished now rebooting
            condition: True
          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"
          #!/bin/bash

          export PYTHONIOENCODING=UTF-8

          ## helps troubleshoot the build
            ip tcp_metrics flush

          ## general changes needed for anything that's going to do routing for VMs
            echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf
            echo 'net.ipv4.conf.all.arp_notify=1' >> /etc/sysctl.conf
            echo 'net.ipv4.conf.all.accept_local=1' >> /etc/sysctl.conf
            sysctl -p

          ## start env var hack
            # certain contexts (like bash scripts called from cfn-init) aren't going to pick up env vars defined in /etc/profile.d scripts
            cp /etc/bashrc /etc/bashrc.bak
            echo /etc/profile.d/env.sh >> /etc/bashrc
            . ~/.bash_profile        
          ## end env var hack

          ## awslogsd is the agent that will pick up various logs, normalize them, and feed them to AWS CloudWatch
            yum install awslogs 
            mkdir -p /var/awslogs/state
            rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
            systemctl enable awslogsd
            systemctl restart awslogsd

          ## enable network services that will be needed by the esxi hosts later.
            systemctl enable ntpd
            systemctl start ntpd

          ## create a 4 volume RAID-0 set using LVM
            pvcreate /dev/sdf /dev/sdg /dev/sdh /dev/sdi  
            vgcreate nested /dev/sdf /dev/sdg /dev/sdh /dev/sdi 
            lvcreate --name nested -l 100%FREE -I 256 -i4 nested
            mkfs.xfs /dev/nested/nested       

          ## update fstab and mount the RAID-0 set to /nested
            echo '/dev/dm-0           /nested          xfs   defaults,noatime   0 0' >> /etc/fstab
            mkdir -p /nested
            mount -a

          ## create the various directory structures required later on
            mkdir -p /nested/scripts /nested/XML /nested/ISOs /nested/VMs /nested/openvswitch /mnt/s3bucket /s3fs-cache /nested/images /nested/esxcli

          ## mount the s3 bucket.  this is only used for doing a parallel copy of many ISOs later on.  most scripts in this solution use s3cmd for gets.
            s3fs ${S3Bucket}:/${S3Path}/ /mnt/s3bucket -o use_cache=/s3fs-cache -o parallel_count=100 -o iam_role='${InstanceProfile}'

          ## retrieve files needed from the specified s3 bucket
            s3cmd get s3://$S3BUCKET/$S3PATH/bash/getfiles.sh /nested/scripts/getfiles.sh --force
            chmod +x /nested/scripts/getfiles.sh
            unbuffer /nested/scripts/getfiles.sh | ts '[%Y%m%d-%H:%M:%.S]' &> /var/log/getfiles.sh.log

          ## retrieve the vcsa ISO and any other ISOs on the bucket while we're at it
            unbuffer /nested/scripts/fetch-installers.sh | ts '[%Y%m%d-%H:%M:%.S]' &> /var/log/fetch-installers.sh.log

          ## Kick off cfn-init to do what its told in the metadata (see above)
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource LinuxKVM --region ${AWS::Region} --configsets Default

          ## signal success or failure
            /opt/aws/bin/cfn-signal -e $? --stack '${AWS::StackId}' --resource LinuxKVM --region '${AWS::Region}'

          --//
